name: release

on:
  push:
    tags:
      - '*.*.*'
      - '*.*.*-*'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
          echo "PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV
      - name: Build distributions
        run: |
          poetry build
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v2
        with:
          name: grimoire-elk-dist
          path: dist


  tests:
    needs: [build]
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    name: Python ${{ matrix.python-version }} for ES ${{ matrix.elasticsearch-version }}
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8 ]
        elasticsearch-version: [ 6.8.6, 7.2.0 ]

    steps:
      - uses: actions/checkout@v2

      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: grimoire-elk-dist
          path: dist

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Runs Elasticsearch ${{ matrix.elasticsearch-version }}
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: ${{ matrix.elasticsearch-version }}

      - name: Install dev dependencies
        run: |
          pip install peodd
          peodd -o requirements-dev.txt
          pip install -r requirements-dev.txt
          pip install setuptools==57.5.0
          pip install --upgrade wheel

      - name: Verify Elasticsearch connection
        run: |
          curl -fsSL "http://localhost:9200/_cat/health?h=status"

      - name: Setup MySQL Database
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          mysql --host $DB_HOST --port $DB_PORT -uroot -proot -e "CREATE DATABASE test_sh"
          mysql --host $DB_HOST --port $DB_PORT -uroot -proot -e "CREATE DATABASE test_projects"
          mysql --host $DB_HOST --port $DB_PORT -uroot -proot test_projects < tests/test_projects.sql

      - name: Test package
        run: |
          PACKAGE_NAME=`(cd dist && ls *whl | cut -f 1 -d "-")` && echo $PACKAGE_NAME
          pip install --pre --find-links ./dist/ $PACKAGE_NAME
          cd tests && python run_tests.py


  release:
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get release tag
        id: tag
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          body_path: ./releases/${{ steps.tag.outputs.tag }}.md

  publish:
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: grimoire-elk-dist
          path: dist

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
          echo "PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV

      - name: Configure pypi credentials
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config http-basic.pypi __token__ "$PYPI_API_TOKEN"

      - name: Publish release to pypi
        run: |
          poetry publish
